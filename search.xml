<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>我的2020</title>
      <link href="2021/01/01/2020%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
      <url>2021/01/01/2020%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="2020年终总结"><a href="#2020年终总结" class="headerlink" title="2020年终总结"></a>2020年终总结</h1><p>2020注定是不平凡的一年，魔幻现实主义的重点并非是魔幻，而是现实 。</p><hr><h2 id="春—生活中的一切不如意在生死面前都无足轻重，忙忙碌碌的人生我们在追求些什么？"><a href="#春—生活中的一切不如意在生死面前都无足轻重，忙忙碌碌的人生我们在追求些什么？" class="headerlink" title="春—生活中的一切不如意在生死面前都无足轻重，忙忙碌碌的人生我们在追求些什么？"></a>春—生活中的一切不如意在生死面前都无足轻重，忙忙碌碌的人生我们在追求些什么？</h2><p>2020年的春天拉开了这魔幻一年的开端，一场突如其来的疫情，不知道打乱了多少人的生活，我们都低估了灾难的影响。</p><p>结束了一年的考研备考，卸下疲惫的身体，并没有想象中的轻松，转头又是新的开始。</p><p>过去七年，从未在家有如此长时间，从未与父母有这么久的交流，熟悉感与新鲜感激烈的交锋。</p><p>没有太多朋友，隔着屏幕的感情不知道还能持续多久，或许，孤独是人生归宿。</p><p>爱情如带蜜的毒，享受甜蜜的同时麻痹着我脆弱的神经。</p><p><strong>这个春天乏味、孤寂、落寞。</strong></p><h2 id="夏—生如夏花之灿烂"><a href="#夏—生如夏花之灿烂" class="headerlink" title="夏—生如夏花之灿烂"></a>夏—生如夏花之灿烂</h2><p>或许2020最重要的就是考研吧，最终也如愿，可我并不快乐。</p><p>匆忙的毕业季，说声再见或许都很奢侈，或许只有借助究竟情感才会宣泄。</p><p>忙忙碌碌的夏天，来不及悼念那么多的地方，思绪总是一闪而过，有些人、有些地方，错过了就是一辈子。</p><p><strong>这个夏天忙碌、伤感、遗憾</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活杂感 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三章 栈与队列</title>
      <link href="2020/12/26/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/"/>
      <url>2020/12/26/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a>栈和队列</h1><p>从<strong>数据结构</strong>角度看，栈和队列也是线性表，其特殊性在于栈和队列的<u>基本操作是线性表操作的子集</u>，它们是操作受限的线性表，因此，可称为限定性的数据结构。但从<strong>数据类型</strong>角度看，它们是和线性表不相同的两类重要的抽象数据类型。</p><h2 id="3-1-栈和队列的定义和特点"><a href="#3-1-栈和队列的定义和特点" class="headerlink" title="3.1 栈和队列的定义和特点"></a>3.1 栈和队列的定义和特点</h2><h3 id="3-1-1-栈的定义和特点（stack）"><a href="#3-1-1-栈的定义和特点（stack）" class="headerlink" title="3.1.1 栈的定义和特点（stack）"></a>3.1.1 栈的定义和特点（stack）</h3><p>运算规则：先进后出—手电筒</p><p>常见名词：栈顶（top）、栈底（base）、空栈</p><p>常用操作：压栈（push）、出栈（pop）</p><p>分类：顺序栈（常）、链栈</p><p>逻辑方式：同线性表（一一对应）</p><h3 id="3-1-2队列的定义和特点（queue）"><a href="#3-1-2队列的定义和特点（queue）" class="headerlink" title="3.1.2队列的定义和特点（queue）"></a>3.1.2队列的定义和特点（queue）</h3><p>运算规则：先进先出—排队</p><p>常见名词：队头、队尾</p><p>常用操作：队尾插入（入队）、队头删除（出队）</p><p>分类：顺序队、链队</p><p>逻辑方式：同线性表（一一对应）</p><h2 id="3-2-案例引入"><a href="#3-2-案例引入" class="headerlink" title="3.2 案例引入"></a>3.2 案例引入</h2><p>栈案例：进制转换、括号匹配检验、表达式计算</p><p>队列案例：舞伴问题</p><h2 id="3-3-栈的表示和操作的实现"><a href="#3-3-栈的表示和操作的实现" class="headerlink" title="3.3 栈的表示和操作的实现"></a>3.3 栈的表示和操作的实现</h2><h3 id="3-3-1-栈的抽象数据类型的类型定义"><a href="#3-3-1-栈的抽象数据类型的类型定义" class="headerlink" title="3.3.1 栈的抽象数据类型的类型定义"></a>3.3.1 栈的抽象数据类型的类型定义</h3><p>数据对象：指定的数据类型（可以为结构体）</p><p>数据关系：前驱，栈顶、栈底</p><p>基本操作：初始化、判断是否为空、求栈长、入栈、出栈、销毁、清空、取出栈顶元素、遍历</p><h3 id="3-3-2-栈的顺序表示和实现"><a href="#3-3-2-栈的顺序表示和实现" class="headerlink" title="3.3.2 栈的顺序表示和实现"></a>3.3.2 栈的顺序表示和实现</h3><p>顺序栈：用一组地址连续的存储单元依次存放自栈底到栈顶的数据元素，同时附设指针 top 指示栈顶元素在顺序栈中的位置。</p><p>栈顶元素用top指针指向，栈底元素用base指针指向。当top==base，表示<strong>空栈</strong>；当top-base=stacklength，表示<strong>满栈</strong>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Sqstack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ElemType *top;<span class="comment">//栈顶指针</span></span><br><span class="line">ElemType *base;<span class="comment">//栈底指针</span></span><br><span class="line"><span class="keyword">int</span> stacklength;<span class="comment">//栈的大小</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="1-栈的初始化"><a href="#1-栈的初始化" class="headerlink" title="(1)栈的初始化"></a>(1)栈的初始化</h4><p><strong>顺序栈的初始化操作就是为顺序栈动态分配一个预定义大小的数组空间</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">status <span class="title">InitSqstack</span><span class="params">(Sqstack &amp; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">s.base = <span class="keyword">new</span> ElemType[Max];<span class="comment">//在堆区开辟一块内存空间，作为s的基地址</span></span><br><span class="line">    <span class="comment">//或者s.base=(ElemType*)malloc(sizeof(ElemType)*Max)[c语言写法]</span></span><br><span class="line"><span class="keyword">if</span> (!s.base) <span class="built_in">exit</span>(OVERFLOW);<span class="comment">//如果s的基地址不存在，则报错</span></span><br><span class="line">s.top = s.base;<span class="comment">//初始化，top指针和base指针都指向栈底元素</span></span><br><span class="line">s.stacklength = Max;<span class="comment">//给栈的长度赋值</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（2）判断栈是否为空、求顺序栈的长度"><a href="#（2）判断栈是否为空、求顺序栈的长度" class="headerlink" title="（2）判断栈是否为空、求顺序栈的长度"></a>（2）判断栈是否为空、求顺序栈的长度</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断栈是否为空</span></span><br><span class="line"><span class="function">status <span class="title">EmptySqstack</span><span class="params">(Sqstack  s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s.base == s.top) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求栈的长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LengthSqstack</span><span class="params">(Sqstack  s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> s.top - s.base;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（3）清空顺序栈、销毁顺序栈"><a href="#（3）清空顺序栈、销毁顺序栈" class="headerlink" title="（3）清空顺序栈、销毁顺序栈"></a>（3）清空顺序栈、销毁顺序栈</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//清空顺序栈</span></span><br><span class="line"><span class="function">status <span class="title">ClearSqstack</span><span class="params">(Sqstack &amp; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s.base) s.top = s.base;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//销毁顺序栈</span></span><br><span class="line"><span class="function">status <span class="title">DestroySqstack</span><span class="params">(Sqstack &amp; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s.base)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> s.base;</span><br><span class="line">s.stacklength = <span class="number">0</span>;</span><br><span class="line">s.base = s.top = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//note1：清空以后，栈在内存中还有；销毁以后栈在内存中已经没有了</span></span><br><span class="line"><span class="comment">//note2：销毁时，先把base指针指向的内存空间释放（忘记指向），然后将栈顶、栈底指针赋值为NULL</span></span><br></pre></td></tr></table></figure><h4 id="（4）入栈、出栈"><a href="#（4）入栈、出栈" class="headerlink" title="（4）入栈、出栈"></a>（4）入栈、出栈</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">status <span class="title">push</span><span class="params">(Sqstack &amp; s, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s.top - s.base == s.stacklength) <span class="keyword">return</span> OVERFLOW;<span class="comment">//判断是否栈满</span></span><br><span class="line">*s.top = e;<span class="comment">//使用*解引用取指针指向的值</span></span><br><span class="line">s.top++;<span class="comment">//指针移动</span></span><br><span class="line"><span class="comment">//合并为*s.top++ = e;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">status <span class="title">pop</span><span class="params">(Sqstack &amp; s, ElemType &amp; e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s.top == s.base) <span class="keyword">return</span> OVERFLOW;<span class="comment">//或者if(EmptySqstack)----判断是否下溢</span></span><br><span class="line">s.top--;<span class="comment">//指向要删除的元素</span></span><br><span class="line">e = *s.top;<span class="comment">//使用*解引用取指针指向的值，并且赋值给变量e</span></span><br><span class="line"><span class="comment">//e = *--s.top;</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-3栈的链式表示何实现"><a href="#3-3-3栈的链式表示何实现" class="headerlink" title="3.3.3栈的链式表示何实现"></a>3.3.3栈的链式表示何实现</h3><p>链栈的表示</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">StackNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line">StackNode *next;</span><br><span class="line">&#125;StackNode,* LinkStack;</span><br><span class="line"><span class="comment">//note1：注意链栈的指针方向（指向栈顶）</span></span><br><span class="line"><span class="comment">//note2：不需要头节点</span></span><br><span class="line"><span class="comment">//note3：基本不存在栈满的情况</span></span><br><span class="line"><span class="comment">//note4：空栈相当于头指针指向空</span></span><br><span class="line"><span class="comment">//note5：插入和删除只在栈顶执行</span></span><br></pre></td></tr></table></figure><p>常用操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function">status <span class="title">InitStack</span><span class="params">(LinkStack &amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">s = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断链栈是否为空</span></span><br><span class="line"><span class="function">status <span class="title">EmptyStack</span><span class="params">(LinkStack s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s = <span class="literal">NULL</span>) <span class="keyword">return</span> OK;</span><br><span class="line"><span class="keyword">return</span> Error;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//入栈</span></span><br><span class="line"><span class="function">status <span class="title">Push</span><span class="params">(LinkStack &amp;s,ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">StackNode * p = <span class="keyword">new</span> StackNode;<span class="comment">//在内存中创建一块新的内存空间用来存放要入栈的数据</span></span><br><span class="line">p-&gt;data = e;</span><br><span class="line">p-&gt;next = s;</span><br><span class="line">s = p;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="function">status <span class="title">Pop</span><span class="params">(LinkStack &amp;s, ElemType&amp; e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s = <span class="literal">NULL</span>) <span class="keyword">return</span> Error;</span><br><span class="line">e = s-&gt;data;</span><br><span class="line">StackNode * p = s;<span class="comment">//／用p临时保存栈顶元素空间，以备释放</span></span><br><span class="line">s = s-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ElemType <span class="title">GetElem</span><span class="params">(LinkStack &amp;s, ElemType&amp; e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s != <span class="literal">NULL</span>) <span class="keyword">return</span> s-&gt;data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-栈与递归"><a href="#3-4-栈与递归" class="headerlink" title="3.4 栈与递归"></a>3.4 栈与递归</h2><p>在一个函数、过程或者数据结构定义的内部又直接（或间接）出现定义本身的应用，则称它们是递归的，或者是递归定义的。</p><p>举例：阶乘函数、二阶 Fibonacci 数列</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">Fact</span><span class="params">(<span class="keyword">long</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> i*Fact(i<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于链表，其结点 LNode的定义由数据域 data和指针域 next组成， 而指针域next是 一 种指向 LNode 类型的指针， 即LNode 的定义中又用到了其自身， 所以链表是一种递归的数据结构.</p><h2 id="3-5-队列的表示和操作实现"><a href="#3-5-队列的表示和操作实现" class="headerlink" title="3.5 队列的表示和操作实现"></a>3.5 队列的表示和操作实现</h2><h3 id="3-5-1-队列的类型定义"><a href="#3-5-1-队列的类型定义" class="headerlink" title="3.5.1 队列的类型定义"></a>3.5.1 队列的类型定义</h3><p>队列的操作与栈的操作类似,不同的是,删除是在表的头部（即队头）进行。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">SqQueue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ElemType * base;<span class="comment">//顺序队列的对头</span></span><br><span class="line"><span class="keyword">int</span> front;<span class="comment">//头指针（队头元素的下标）</span></span><br><span class="line"><span class="keyword">int</span> rear;<span class="comment">//尾指针（队尾元素的下标）</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//与顺序表的区别：顺序表里面有三个成员（数据+长度）</span></span><br></pre></td></tr></table></figure><h3 id="3-5-2队列的顺序表示和实现"><a href="#3-5-2队列的顺序表示和实现" class="headerlink" title="3.5.2队列的顺序表示和实现"></a>3.5.2队列的顺序表示和实现</h3><p>队列也有两种存储表示，顺序表示和链式。</p><p>和顺序栈相类似，在队列的顺序存储结构中，除了用<strong>一组地址连续的存储单元</strong>依次存放从队列头到队列尾的元素之外，尚需附设两个<strong>整型</strong>变量 front和rear分别指示队列头元素及队列尾元素的<strong>位置</strong>（后面分别称为头指针和尾指针）</p><p>非空队列中，头指针始终指向<strong>队列头元素</strong>，而尾指针始终指向<strong>队列尾元素的下一个位置</strong>。</p><p>循环队列：当进行入队、出队操作时，<strong>队列此的实际可用空间并未占满，称为假溢出</strong>。为了解决假溢出，采用循环队列解决。头、尾指针以及队列元素之间的关系不变，只是在循环队列中，头、 尾指针“ 依环状增1”的操作可用 “ <strong>模</strong> ”运算来实现。 通过取模，头指针和尾指针就可以在顺序表空间内以头尾衔接的方式” 循环 ＂移动。</p><p><strong>对于循环队列不能以头、尾指针的值是否相同来判别队列空间是“ 满 ”</strong><br><strong>还是“ 空 ”</strong></p><p>通常有以下两种处理方法：</p><ol><li><p>少用一个元素空间</p><p>队空的条件： Q.front  =  Q.rear<br>队满的条件： (Q rear+ 1)%MaxQsize =  Q.front</p></li><li><p>另设一个标志位以区别队列是“ 空 ”还是“ 满 ＂ </p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">SqQueue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ElemType * base;<span class="comment">//顺序队列的对头</span></span><br><span class="line"><span class="keyword">int</span> front;<span class="comment">//头指针（队头元素的下标）</span></span><br><span class="line"><span class="keyword">int</span> rear;<span class="comment">//尾指针（队尾元素的下标）</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//与顺序表的区别：顺序表里面有三个成员（数据+长度）</span></span><br><span class="line"><span class="function">status <span class="title">InitQueue</span><span class="params">(SqQueue &amp; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">s.base = <span class="keyword">new</span> ElemType[Max];</span><br><span class="line">s.front = s.rear=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (!s.base) <span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LengthQueue</span><span class="params">(SqQueue s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (s.rear - s.front + Max) % Max;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//入队</span></span><br><span class="line"><span class="function">status <span class="title">EnQueue</span><span class="params">(SqQueue &amp; s,<span class="keyword">int</span> e)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">if</span> ((s.rear + <span class="number">1</span>) % Max == s.front) <span class="keyword">return</span> Error;<span class="comment">//如果队列满，返回错误</span></span><br><span class="line">s.base[s.rear] = e;</span><br><span class="line">s.rear = (s.rear + <span class="number">1</span>)&amp;Max;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出队（先进先出）</span></span><br><span class="line"><span class="function">status <span class="title">DeQueue</span><span class="params">(SqQueue &amp; s, <span class="keyword">int</span> e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s.rear==s.front) <span class="keyword">return</span> Error;<span class="comment">//如果队列为空，返回错误</span></span><br><span class="line">e = s.base[s.front];<span class="comment">//取出队列第一个元素</span></span><br><span class="line">s.front = (s.front + <span class="number">1</span>)&amp;Max;<span class="comment">//头指针移动</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//得到队列首元素</span></span><br><span class="line"><span class="function">status <span class="title">GetHead</span><span class="params">(SqQueue &amp; s, <span class="keyword">int</span> e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s.rear != s.front)<span class="comment">//如果队列不为空</span></span><br><span class="line"><span class="keyword">return</span> s.base[s.front];<span class="comment">//返回队列中第一个元素的值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//note1：为了防止队空队满指针指向相同，当rear==front--队空；（rear+1）%max==front--队满</span></span><br></pre></td></tr></table></figure><h3 id="3-5-3-队列的链式表示和实现"><a href="#3-5-3-队列的链式表示和实现" class="headerlink" title="3.5.3 队列的链式表示和实现"></a>3.5.3 队列的链式表示和实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Qnode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line">Qnode * next;</span><br><span class="line">&#125;Qnode,* QueuePtr;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">QueuePtr front;</span><br><span class="line">QueuePtr rear;</span><br><span class="line">&#125;LinkQueue;</span><br><span class="line"><span class="function">status <span class="title">InitQueue</span><span class="params">(LinkQueue &amp; q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">q.front=q.rear = <span class="keyword">new</span> Qnode;</span><br><span class="line"><span class="keyword">if</span> (!q.front) <span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">q.front-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">status <span class="title">DestoryQueue</span><span class="params">(LinkQueue &amp;q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (q.front)</span><br><span class="line">&#123;</span><br><span class="line">Qnode * p = q.front-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> q.front;</span><br><span class="line">q.front = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">status <span class="title">PushQueue</span><span class="params">(LinkQueue &amp;q,ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Qnode * p = <span class="keyword">new</span> Qnode;</span><br><span class="line"><span class="keyword">if</span> (!q.front) <span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">q.rear-&gt;next = p;</span><br><span class="line">p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">p-&gt;data = e;</span><br><span class="line">q.rear = p;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">status <span class="title">PopQueue</span><span class="params">(LinkQueue &amp;q, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (q.front == q.rear) <span class="keyword">return</span> Error;</span><br><span class="line">Qnode * p = q.front-&gt;next;</span><br><span class="line">e = p-&gt;data;</span><br><span class="line">q.front-&gt;next = p-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (p == q.rear) q.rear = q.front;</span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line">p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">status <span class="title">GetElemQueue</span><span class="params">(LinkQueue &amp;q, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (q.front == q.rear) <span class="keyword">return</span> Error;</span><br><span class="line">e = q.front-&gt;data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/12/18/hello-world/"/>
      <url>2020/12/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
